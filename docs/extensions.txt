EXTENSIONS (depends on GENERICS, OVERLOADS, INTERFACES)

NEW SYNTACTIC FEATURES:

New Tokens:
-----------
WITH ::= with
THIS ::= this
DOUBLE_COLON ::= ::

New NonTerminals:
-----------------
MethodDeclaration ::= Type IDENT TypeParamList? ParameterList FAT_ARROW (Expression | Statement)
MethodInvoation ::= Expression DOT IDENT TypeArgList? LPAREN (Expression (COMMA Expression)*)? RPAREN
MethodReference ::= Expression DOUBLE_COLON IDENT

Extended NonTerminals:
----------------------
Type ::= Type WITH LBRACE MethodDeclaration* RBRACE
Expression ::= THIS
             | MethodInvocation
             | MethodReference

NEW SEMANTIC FEATURES:

- Extensions add methods to types
- Methods are functions "bound" to a type, and can be called with a method invocation
- Methods can also be referenced using a method reference expression
- Methods can use the 'this' expression to refer to the instance of the type it was invoked on
- Extensions include the methods as part of the types, and are included in interface assignability checks
- Assignability to extensions ignores the methods, based on structure only

TRANSFORMATION:

- Will require invocation instruction and method reference instruction